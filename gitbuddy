#!/usr/bin/env python3

import subprocess
import os
import sys
import tempfile
import time

# Define color variables
RED = '\033[31m'
GREEN = '\033[32m'
YELLOW = '\033[33m'
BLUE = '\033[34m'
MAGENTA = '\033[35m'
CYAN = '\033[36m'
WHITE = '\033[37m'
RESET = '\033[0m'

# Function to run shell commands and return output
def run_command(command, capture_output=False):
    try:
        result = subprocess.run(command, shell=True, text=True, capture_output=capture_output, check=True)
        return result.stdout.strip() if capture_output else None
    except subprocess.CalledProcessError as e:
        print(f"{RED}‚ùå Error: {e}{RESET}")
        sys.exit(1)

# Clear screen (cross-platform)
def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

# Check if we are inside a Git repository
def is_git_repository():
    result = run_command("git rev-parse --is-inside-work-tree", capture_output=True)
    return result is not None

# Create a commit message template
def create_commit_template():
    template = (
        ""
    )
    # Create a temporary file with the template
    temp_file = tempfile.NamedTemporaryFile(delete=False, mode='w', suffix='.tmp')
    temp_file.write(template)
    temp_file.close()
    return temp_file.name

# Replace COMMIT_EDITMSG with custom template
def replace_commit_message_with_template(template_file):
    git_commit_file = os.path.join(".git", "COMMIT_EDITMSG")
    with open(template_file, 'r') as temp_file, open(git_commit_file, 'w') as commit_file:
        commit_file.write(temp_file.read())

# Print the commit message after the commit is done with color differentiation
def print_commit_message():
    git_commit_file = os.path.join(".git", "COMMIT_EDITMSG")
    with open(git_commit_file, 'r') as commit_file:
        commit_message = commit_file.read()

        # Split the commit message into lines
        lines = commit_message.splitlines()

        # Print the first line in one color
        if lines:
            print(f"\n{MAGENTA}üí° Commit:{RESET}\n")
            print(f"{GREEN}{lines[0]}{RESET}")  # First line in green

        # Print the rest of the lines in another color
        if len(lines) > 1:
            for line in lines[1:]:
                print(f"{YELLOW}{line}{RESET}")  # Rest of the lines in yellow

# Remove any existing swap files
def remove_swap_files():
    swap_file_path = os.path.join(".git", ".COMMIT_EDITMSG.swp")
    if os.path.exists(swap_file_path):
        os.remove(swap_file_path)
        print(f"{GREEN}‚úÖ Removed swap file: {swap_file_path}{RESET}")

# Main script
def main():
    clear_screen()
    print(f"{BLUE}üöÄ Welcome to the Git Buddy!{RESET}\n")
    time.sleep(1)

    # Check if we're in a Git repository
    if not is_git_repository():
        print(f"{RED}‚ùå No Git repository found in the current directory.{RESET}\n")
        sys.exit(1)

    # Check for changes
    status_output = run_command("git status --porcelain", capture_output=True)

    if not status_output:
        # No changes detected, exit the script immediately
        print(f"{GREEN}‚úÖ No changes detected. Exiting script.{RESET}")
        sys.exit(0)

    # Add changes if detected
    run_command("git add .")

    # Inform the user about how to save and close nano
    print(f"{YELLOW}Opening nano to write your commit message.{RESET}")
    print(f"{YELLOW}Use 'Ctrl+O' to save and 'Ctrl+X' to exit nano.{RESET}")
    time.sleep(3)

    # Create a commit message template
    commit_template = create_commit_template()

    # Replace the default COMMIT_EDITMSG with the custom template
    replace_commit_message_with_template(commit_template)

    # Remove any existing swap files to prevent issues
    remove_swap_files()

    # Open nano with the replaced commit message
    print(f"\n{CYAN}----------------------------------------------------{RESET}")
    run_command("nano .git/COMMIT_EDITMSG")

    # Perform the commit without reopening the editor
    run_command("git commit --file=.git/COMMIT_EDITMSG --no-edit")

    # Print the commit message after the commit is done
    print_commit_message()

    print(f"\n{GREEN}üì¶ Changes saved!{RESET}")
    print(f"{CYAN}----------------------------------------------------{RESET}")

    # Delete the temporary template file after commit
    os.remove(commit_template)

    # Ask if user wants to pull
    while True:
        yn = input("\nüîÑ Do you want to pull from origin? (y/n): ").strip().lower()
        if yn in ['y', 'yes']:
            branch = input("\nüåø Enter the branch name to pull from: ").strip()
            if not branch:
                print(f"{RED}‚ùå Error: No branch name provided. Exiting script.{RESET}")
                sys.exit(1)
            print(f"\n{CYAN}----------------------------------------------------{RESET}")
            try:
                run_command(f"git pull origin {branch}")
                print(f"\n{GREEN}‚úÖ Changes pulled from branch {YELLOW}'{branch}'{RESET}{GREEN}!{RESET}")
                print(f"{CYAN}----------------------------------------------------{RESET}")
                break
            except subprocess.CalledProcessError:
                print(f"{RED}‚ùå Error: Failed to pull from branch '{branch}'. Exiting script.{RESET}")
                print(f"{CYAN}----------------------------------------------------{RESET}")
                sys.exit(1)
        elif yn in ['n', 'no']:
            print(f"\n{YELLOW}Pull skipped. Exiting script. üëã{RESET}")
            sys.exit(0)

    # Determine the current branch
    current_branch = run_command("git rev-parse --abbrev-ref HEAD", capture_output=True)

    # Ask if user wants to push
    while True:
        yn = input(f"\nüöÄ Do you want to push changes to the current branch {YELLOW}'{current_branch}'{RESET}? (y/n): ").strip().lower()
        if yn in ['y', 'yes']:
            print(f"\n{CYAN}----------------------------------------------------{RESET}")
            run_command(f"git push origin {current_branch}")
            print(f"\n{GREEN}‚úÖ Changes pushed to remote branch {YELLOW}'{current_branch}'{RESET}{GREEN}!{RESET}")
            print(f"{CYAN}----------------------------------------------------{RESET}")
            break
        elif yn in ['n', 'no']:
            print(f"\n{YELLOW}Push skipped. Exiting script. üëã{RESET}")
            sys.exit(0)

    print(f"\n{BLUE}üëã All done! Have a great day!{RESET}")

if __name__ == "__main__":
    main()
